{
	"name" : "CSPP Exam - Week 1",
	"programs" : [
		{
			"title": "Are We In Trouble",
			"program": "# We have two monkeys, a and b, and the parameters a_smile and b_smile \r\n# indicate if each is smiling. \r\n# We are in trouble if they are both smiling or if neither of them is smiling. \r\n# Return True if we are in trouble.\r\n\r\n\r\n# Don't modify the function name.\r\ndef areWeInTrouble(a_smile, b_smile):\r\n  # Your code goes here...\r\n\r\n  # return boolean value\r\n  return a_smile == b_smile\r\n\r\n# Don't modify the following code\r\ndef eval():\r\n  tests = [(True, True, True) , (True, False, False), (False, True, False), (False, False, True)]\r\n  results = []\r\n  for test in tests:\r\n    if test[2] == areWeInTrouble(test[0], test[1]):\r\n      results.append(\"Pass\")\r\n    else:\r\n      results.append(\"Fail\")\r\n  printResults(tests, results)\r\n\r\n# Don't modify the following code\r\ndef printResults(tests, results):\r\n  print \"\\tInput\", \"\\t\\t\", \"Output\", \"\\t\\t\", \"Status\"\r\n  print 35 * \"=\"\r\n  for i, test in enumerate(tests):\r\n    print test[0], \"\\t\", test[1], \"\\t\", test[1], \"\\t\\t\", results[i]\r\n\r\n# Don't modify the following code\r\neval()"
		},
		{
			"title": "Other Chars",
			"program": "# Given a string, return a new string made of every other char \r\n# starting with the # first, so \"Hello\" yields \"Hlo\".\r\n\r\ndef otherChar(str):\r\n  newString = ''\r\n  # Your code goes here...\r\n  newString = str[::2]\r\n  # return new string\r\n  return newString\r\n\r\n# Don't modify the following code\r\ndef eval():\r\n  tests = [('Hello', 'Hlo'), ('MSITT', 'MIT'), ('Python', 'Pto'), ('Wo rld', 'W ld')]\r\n  results = []\r\n  for test in tests:\r\n    if test[1] == otherChar(test[0]):\r\n      results.append(\"Pass\")\r\n    else:\r\n      results.append(\"Fail\")\r\n  printResults(tests, results)\r\n\r\n# Don't modify the following code\r\ndef printResults(tests, results):\r\n  print \"Input\", \"\\t\", \"Output\", \"\\t\\t\", \"Status\"\r\n  print 30 * \"=\"\r\n  for i, test in enumerate(tests):\r\n    print test[0], \"\\t\", test[1], \"\\t\\t\", results[i]\r\n\r\n# Don't modify the following code\r\neval()"
		},
		{
			"title": "Find And Replace",
			"program": "# Find all occurrences of the character a in the string str and \r\n# replace it with the character t.\r\n\r\n\r\n# Don't modify the function name. \r\ndef findAndReplace(str, a, t):\r\n  # Your code goes here...\r\n  newString = ''\r\n  newString = str.replace(a,t)\r\n  # return new string\r\n  return newString\r\n# print findAndReplace('Hello World', 'l', '*')\r\n# Don't modify the following code\r\ndef eval():\r\n  tests = [('Hello World', 'l', '*', 'He**o Wor*d'), ('New Password', 's', '$', 'New Pa$$word'),\r\n       ('AAAAAaaaaaa', 'A', '#', '#####aaaaaa'), ('world wide web', 'W', '@', 'world wide web') ]\r\n  results = []\r\n  for test in tests:\r\n    if test[3] == findAndReplace(test[0], test[1], test[2]):\r\n      results.append(\"Pass\")\r\n    else:\r\n      results.append(\"Fail\")\r\n  printResults(tests, results)\r\n\r\n# Don't modify the following code\r\ndef printResults(tests, results):\r\n  print \"\\tInput\", \"\\t\\t\\t\\t\", \"Output\", \"\\t\\t\\t\", \"Status\"\r\n  print 50 * \"=\"\r\n  for i, test in enumerate(tests):\r\n    print test[0], \"\\t\", test[1], \"\\t\", test[2], \"\\t\", test[3], \"\\t\\t\", results[i]\r\n\r\n# Don't modify the following code\r\neval()"
		},
		{
			"title": "Compute Sums",
			"program": "# Compute the sum of odd digits and even digits of the given number n. \r\n# Return True if the sums are equal and False otherwise.\r\n#\r\n# Example: 1423\r\n# Even digits are 2 and 4 and their sum is 6\r\n# Odd digits are 1 and 3 and their sum is 4\r\n# result is False, because evenSum and oddSum are not equal.\r\n\r\n# Don't modify the function name.\r\ndef computeSums(n):\r\n  # Your code goes here....\r\n  sume = 0\r\n  sumo = 0\r\n  for i in str(n):\r\n    if int(i)%2==0:\r\n      sume+=int(i)\r\n    else:\r\n      sumo+=int(i)\r\n  # return boolean value\r\n  # print sume, sumo\r\n  return sume==sumo\r\nprint computeSums(3314)\r\n\r\n# Don't modify the following code\r\ndef eval():\r\n  tests = [(3314, False) , (3324, True), (6776, False), (1234, False)]\r\n  results = []\r\n  for test in tests:\r\n    if test[1] == computeSums(test[0]):\r\n      results.append(\"Pass\")\r\n    else:\r\n      results.append(\"Fail\")\r\n  printResults(tests, results)\r\n\r\n# Don't modify the following code\r\ndef printResults(tests, results):\r\n  print \"Input\", \"\\t\", \"Output\", \"\\t\", \"Status\"\r\n  print 22 * \"=\"\r\n  for i, test in enumerate(tests):\r\n    print test[0], \"\\t\", test[1], \"\\t\", results[i]\r\n\r\n# Don't modify the following code\r\neval()"
		},
		{
			"title": "Compute Grade",
			"program": "#\r\n# Compute the grade of a student given the score out of 100. \r\n# 'A' grade if the score is greater than 90. \r\n# 'B' grade if the score is between 80 and 89 (inclusive). \r\n# 'C' grade if the score is between 70 and 79 (inclusive). \r\n# 'F' grade if the score is less than 70.\r\n\r\n# Don't modify the function name.\r\ndef computeGrade(marks):\r\n  grade = ''\r\n  # Your code goes here...\r\n  if marks>90:\r\n    grade = 'A'\r\n  elif marks>=80:\r\n    grade = 'B'\r\n  elif marks>=70:\r\n    grade = 'C'\r\n  else:\r\n    grade = 'F'\r\n  # return grade\r\n  return grade\r\n\r\n# Don't modify the following code\r\ndef eval():\r\n  tests = [(100, 'A') , (80.92, 'B'), (72.44, 'C'), (69.99, 'F')]\r\n  results = []\r\n  for test in tests:\r\n    if test[1] == computeGrade(test[0]):\r\n      results.append(\"Pass\")\r\n    else:\r\n      results.append(\"Fail\")\r\n  printResults(tests, results)\r\n\r\n# Don't modify the following code\r\ndef printResults(tests, results):\r\n  print \"Input\", \"\\t\", \"Output\", \"\\t\", \"Status\"\r\n  print 22 * \"=\"\r\n  for i, test in enumerate(tests):\r\n    print test[0], \"\\t\", test[1], \"\\t\\t\", results[i]\r\n\r\n# Don't modify the following code\r\neval()"
		},
		{
			"title": "Encrypt String",
			"program": "# Encrypt a given string str based on the following coding scheme.\r\n# a b c d e f g h i j k l m \r\n# | | | | | | | | | | | | |\r\n# n o p q r s t u v w x y z\r\n\r\n# Ex:  p y t h o n\r\n#      | | | | | |\r\n#      c l g u b a \r\n\r\n# Don't modify the function name\r\ndef encryptString(str):\r\n  encryptedString = ''\r\n  # Your code goes here...\r\n  for i in str:\r\n    if ord(i)>=110:\r\n      encryptedString+=chr(ord(i)-13)\r\n    else:\r\n      encryptedString+=chr(ord(i)+13)\r\n  # print encryptedString\r\n  # return encrypted string\r\n  return encryptedString\r\nencryptString('python')\r\n\r\n# Don't modify the following code\r\ndef eval():\r\n  tests = [('hello', 'uryyb'), ('python', 'clbuga'), ('clbuga', 'python'), ('kungfu', 'xhatsh'), ('friend', 'sevraq')]\r\n  results = []\r\n  for test in tests:\r\n    if test[1] == encryptString(test[0]):\r\n      results.append(\"Pass\")\r\n    else:\r\n      results.append(\"Fail\")\r\n  printResults(tests, results)\r\n\r\n# Don't modify the following code\r\ndef printResults(tests, results):\r\n  print \"Input\", \"\\t\", \"Output\", \"\\t\", \"Status\"\r\n  print 22 * \"=\"\r\n  for i, test in enumerate(tests):\r\n    print test[0], \"\\t\", test[1], \"\\t\", results[i]\r\n\r\n# Don't modify the following code\r\neval()"
		},
		{
			"title": "Factorial Digit Sum",
			"program": "# Compute the factorial digit sum of the given number n \r\n# For example: Factorial of 10 is 3628800. Factorial digit sum of 10 \r\n# would be 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.\r\n#\r\n# Note : Use both methods to compute the result.\r\n\r\n# Don't change the function name\r\ndef factorial(n):\r\n  result = 1\r\n  # Your code goes here...\r\n\r\n\r\n  # return the factorial of n\r\n  return result\r\n\r\n# Don't change the function name\r\ndef factorialDigitSum(n):\r\n  sum = 0\r\n  # Your code goes here...\r\n  \r\n  def factorial(n1):\r\n    if n1==0:\r\n      return 1\r\n    else:\r\n      return n1*factorial(n1-1)\r\n  n=factorial(n)\r\n  # print n\r\n  while n:\r\n    sum += n%10\r\n    n \/= 10\r\n  return sum\r\n  # return factorial digit sum of a given number n.\r\n  # return sum\r\n# print factorialDigitSum(10)\r\n\r\n# Don't modify the following code\r\ndef eval():\r\n  tests = [(10, 27), (9, 27), (15, 45), (26, 81), (5, 3)]\r\n  results = []\r\n  for test in tests:\r\n    if test[1] == factorialDigitSum(test[0]):\r\n      results.append(\"Pass\")\r\n    else:\r\n      results.append(\"Fail\")\r\n  printResults(tests, results)\r\n\r\n# Don't modify the following code\r\ndef printResults(tests, results):\r\n  print \"Input\", \"\\t\", \"Output\", \"\\t\", \"Status\"\r\n  print 30 * \"=\"\r\n  for i, test in enumerate(tests):\r\n    print test[0], \"\\t\\t\", test[1], \"\\t\\t\", results[i]\r\n\r\n# Don't modify the following code\r\neval()"
		},
		{
			"title": "Alphabetic Order",
			"program": "# Return True if the given string has all the characters in alphabetic order \r\n# and return False otherwise.\r\n\r\ndef alphabeticOrder(str):\r\n  # Your code goes here...\r\n  lis = []\r\n  str = str.lower()\r\n  for i in str:\r\n    lis.append(ord(i))\r\n  # return boolean value (True \/ False)\r\n  return sorted(lis) == lis\r\n\r\n\r\n# Don't modify the following code\r\ndef eval():\r\n  tests = [('Hello', False), ('Effort', True), ('Not', True), ('Accent', True), ('Almost', True), ('What', False)]\r\n  results = []\r\n  for test in tests:\r\n    if test[1] == alphabeticOrder(test[0]):\r\n      results.append(\"Pass\")\r\n    else:\r\n      results.append(\"Fail\")\r\n  printResults(tests, results)\r\n\r\n# Don't modify the following code\r\ndef printResults(tests, results):\r\n  print \"Input\", \"\\t\", \"Output\", \"\\t\", \"Status\"\r\n  print 30 * \"=\"\r\n  for i, test in enumerate(tests):\r\n    print test[0], \"\\t\", test[1], \"\\t\", results[i]\r\n\r\n# Don't modify the following code\r\neval()"
		},
		{
			"title": "Largest Sum",
			"program": "# Compute the largest sum using any 3 digits of a given number n.\r\n\r\ndef largestSum(str1):\r\n  sum1 = 0\r\n  lis = []\r\n  # Your code goes here...\r\n  str1 = str(str1)\r\n  for i in str1:\r\n    lis.append(int(i))\r\n  lis = sorted(lis)[-3:]\r\n  # print sum(lis)\r\n  sum1 = sum(lis)\r\n  # return largest sum\r\n  return sum1\r\n# largestSum(11155431)\r\n# Don't modify the following code\r\ndef eval():\r\n  tests = [(11155431, 14), (12345678, 21), (83982002, 25), (87337302, 22), (93272792, 25), (9999999999, 27)]\r\n  results = []\r\n  for test in tests:\r\n    if test[1] == largestSum(test[0]):\r\n      results.append(\"Pass\")\r\n    else:\r\n      results.append(\"Fail\")\r\n  printResults(tests, results)\r\n\r\n# Don't modify the following code\r\ndef printResults(tests, results):\r\n  print \"Input\", \"\\t\\t\", \"Output\", \"\\t\", \"Status\"\r\n  print 30 * \"=\"\r\n  for i, test in enumerate(tests):\r\n    print test[0], \"\\t\", test[1], \"\\t\\t\", results[i]\r\n\r\n# Don't modify the following code\r\neval()"
		},
		{
			"title": "Largest Number",
			"program": "# Find the largest number that can be formed using the digits of a given number n.\r\n\r\ndef largestNumber(str1):\r\n  # Your code goes here...\r\n  s = str(str1)\r\n  lis = sorted(s)[::-1]\r\n  largestNumber = int(''.join(lis))\r\n  # return largest number\r\n  return largestNumber\r\n\r\n\r\n# Don't modify the following code\r\ndef eval():\r\n  tests = [(11155431, 55431111), (12345678, 87654321), (83982002, 98832200), (87337302, 87733302), (93272792, 99773222), (9999999999, 9999999999)]\r\n  results = []\r\n  for test in tests:\r\n    if test[1] == largestNumber(test[0]):\r\n      results.append(\"Pass\")\r\n    else:\r\n      results.append(\"Fail\")\r\n  printResults(tests, results)\r\n\r\n# Don't modify the following code\r\ndef printResults(tests, results):\r\n  print \"Input\", \"\\t\\t\", \"Output\", \"\\t\", \"Status\"\r\n  print 30 * \"=\"\r\n  for i, test in enumerate(tests):\r\n    print test[0], \"\\t\", test[1], \"\\t\\t\", results[i]\r\n\r\n# Don't modify the following code\r\neval()"
		}
	]
}